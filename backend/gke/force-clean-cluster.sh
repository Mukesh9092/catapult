#!/usr/bin/env bash

# Requires:
# - gcloud credentials present
# - jq

# OPTIONS:
# GKE_CRED_JSON     gcloud credentials.
# GKE_LOCATION      The AZ the cluster is deployed into.
# GKE_PROJECT       gcloud project.
# OWNER             The owner of the clusters to filter on
# RESOURCE_LIST     Resources to remove, as generated by `make find-resources`.
# CLUSTER_SELECTOR  JQ expression for filtering clusters, defaults to all.
# ADDRESS_SELECTOR  JQ expression for filtering addresses, defaults to all.
# DISK_SELECTOR     JQ expression for filtering disks, defaluts to all.
# ACTUALLY_DELETE   Delete will only be executed if this is set to `true`.

. ./defaults.sh
. ../../include/common.sh
. .envrc
. "${ROOT_DIR}/backend/gke/lib/auth.sh"

# Check that the resource list is given
if [[ ! -r "${RESOURCE_LIST:-}" ]]; then
    err "Could not read resource list ${RESOURCE_LIST:-(RESOURCE_LIST not set)}"
    exit 1
fi

if [[ "${ACTUALLY_DELETE:-}" = "true" ]]; then
    PREFIX=""
else
    PREFIX="echo"
    # shellcheck disable=SC2016
    warn 'ACTUALLY_DELETE not set to `true`, doing dry-run'
fi

CLUSTER_JQ_EXPR="
    .clusters[]
    | select(.labels.owner == \"${OWNER}\")
    | select(${CLUSTER_SELECTOR:-true})
    | .name
"
for cluster in $(jq -r "${CLUSTER_JQ_EXPR}" "${RESOURCE_LIST}"); do
    info "Removing cluster ${cluster}"
    ${PREFIX} gcloud container clusters delete "${cluster}" \
        --quiet --project="${GKE_PROJECT}" --zone="${GKE_LOCATION}"
done

for address in $(jq -r ".addresses[] | select(${ADDRESS_SELECTOR:-true}) | .name" "${RESOURCE_LIST}"); do
    info "Removing address ${address}"
    ${PREFIX} gcloud compute addresses delete "${address}" --quiet --region="${GKE_LOCATION%-[abcdef]}"
done

for disk in $(jq -r ".disks[] | select(${DISK_SELECTOR:-true}) | .name" "${RESOURCE_LIST}"); do
    info "Removing disk ${disk}"
    ${PREFIX} gcloud compute disks delete "${disk}" \
        --quiet --project="${GKE_PROJECT}" --zone="${GKE_LOCATION}"
done

dns_zone="$(jq -r '.dns.zone' "${RESOURCE_LIST}")"
mapfile -t recordsets < <(
    jq -r --arg zone "${dns_zone}" '
        . as $root
        | .dns.entries[]
        | select([.info["external-dns/owner"]] | inside($root.clusters | map(.name)) | not)
        | .recordsets[]
        | ["--name=\(.name)", "--type=\(.type)", "--zone=\($zone)", "--ttl=\(.ttl)"] + .rrdatas
        | @sh
    ' "${RESOURCE_LIST}"
)

if [[ "${#recordsets[@]}" -gt 0 ]]; then
    ${PREFIX} gcloud dns record-sets transaction start --zone="${dns_zone}"
    for recordset in "${recordsets[@]}"; do
        record_name="$(grep --perl-regexp --only-matching -- "--name='?\K[^']+(?=')" <<<"${recordset}")"
        record_type="$(grep --perl-regexp --only-matching -- "--type='?\K[^']+(?=')" <<<"${recordset}")"
        info "Removing DNS record set ${record_name} (type ${record_type})"
        eval "${PREFIX} gcloud dns record-sets transaction remove ${recordset}"
    done
    info "Committing DNS changesâ€¦"
    ${PREFIX} gcloud dns record-sets transaction execute --zone="${dns_zone}"
fi
